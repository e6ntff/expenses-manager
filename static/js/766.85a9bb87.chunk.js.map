{"version":3,"file":"static/js/766.85a9bb87.chunk.js","mappings":"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","sources":["components/ResetButton.tsx","components/SliderDiagram.tsx","components/YearSlider.tsx","components/DiagramBar.tsx","components/DiagramPie.tsx","components/StatsCard.tsx","pages/Stats.tsx"],"sourcesContent":["import { ReloadOutlined } from '@ant-design/icons';\r\nimport { Button, Tooltip } from 'antd';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport languages from 'settings/languages';\r\nimport { optionsStore } from 'utils/optionsStore';\r\nimport { userStore } from 'utils/userStore';\r\n\r\ninterface Props {\r\n\tdisabled?: boolean;\r\n\treset: () => void;\r\n}\r\n\r\nconst ResetButton: React.FC<Props> = observer(({ disabled, reset }) => {\r\n\tconst { userOptions } = optionsStore;\r\n\tconst { isSmallScreen } = userStore;\r\n\r\n\treturn (\r\n\t\t<Tooltip title={languages.reset[userOptions.language]}>\r\n\t\t\t<Button\r\n\t\t\t\tdisabled={disabled}\r\n\t\t\t\tonClick={reset}\r\n\t\t\t\tsize={isSmallScreen ? 'small' : 'middle'}\r\n\t\t\t>\r\n\t\t\t\t<ReloadOutlined />\r\n\t\t\t</Button>\r\n\t\t</Tooltip>\r\n\t);\r\n});\r\n\r\nexport default ResetButton;\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { memo, useMemo } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { listStore } from 'utils/listStore';\r\nimport { optionsStore } from 'utils/optionsStore';\r\nimport { getValuesByMonth } from 'utils/transformData';\r\n\r\nconst SliderDiagram: React.FC = observer(() => {\r\n\tconst { list } = listStore;\r\n\tconst { defaultRange } = optionsStore;\r\n\r\n\tconst valuesByMonth: number[] | { [key: string]: number } = useMemo(\r\n\t\t() => getValuesByMonth(list, defaultRange),\r\n\t\t[list, defaultRange]\r\n\t);\r\n\r\n\tconst data = {\r\n\t\tlabels: new Array(valuesByMonth.length).fill(''),\r\n\t\tdatasets: [\r\n\t\t\t{\r\n\t\t\t\tdata: valuesByMonth,\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n\r\n\tconst options = {\r\n\t\tplugins: {\r\n\t\t\tlegend: {\r\n\t\t\t\tdisplay: false,\r\n\t\t\t},\r\n\t\t\ttooltip: {\r\n\t\t\t\tenabled: false,\r\n\t\t\t},\r\n\t\t},\r\n\t\tscales: {\r\n\t\t\tx: {\r\n\t\t\t\tdisplay: false,\r\n\t\t\t\tgrid: {\r\n\t\t\t\t\tdisplay: false,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\ty: {\r\n\t\t\t\tdisplay: false,\r\n\t\t\t\tgrid: {\r\n\t\t\t\t\tdisplay: false,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t},\r\n\t\telements: {\r\n\t\t\tpoint: {\r\n\t\t\t\tradius: 0,\r\n\t\t\t},\r\n\t\t\tline: {\r\n\t\t\t\tcubicInterpolationMode: 'monotone' as 'monotone',\r\n\t\t\t\tborderColor: '#7775',\r\n\t\t\t},\r\n\t\t},\r\n\t\taspectRatio: 25,\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Line\r\n\t\t\tstyle={{ inlineSize: '100%' }}\r\n\t\t\tdata={data}\r\n\t\t\toptions={options}\r\n\t\t/>\r\n\t);\r\n});\r\n\r\nexport default memo(SliderDiagram);\r\n","import React, { memo, useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Flex, Segmented, Slider, Tooltip as TooltipAntd } from 'antd';\r\nimport { listStore } from 'utils/listStore';\r\nimport { ExpenseItem } from 'settings/interfaces';\r\nimport dayjs from 'dayjs';\r\nimport minMax from 'dayjs/plugin/minMax';\r\nimport { ZoomInOutlined, ZoomOutOutlined } from '@ant-design/icons';\r\nimport { userStore } from 'utils/userStore';\r\nimport {\r\n\tChart,\r\n\tTooltip,\r\n\tCategoryScale,\r\n\tLinearScale,\r\n\tLineElement,\r\n\tLineController,\r\n\tPointElement,\r\n} from 'chart.js';\r\nimport SliderDiagram from './SliderDiagram';\r\nimport { optionsStore } from 'utils/optionsStore';\r\nimport languages from 'settings/languages';\r\nChart.register(\r\n\tTooltip,\r\n\tLineElement,\r\n\tLineController,\r\n\tCategoryScale,\r\n\tLinearScale,\r\n\tPointElement\r\n);\r\n\r\ndayjs.extend(minMax);\r\n\r\ninterface Props {\r\n\trange: number[];\r\n\tsetRange: (arg0: number[]) => void;\r\n\tisAccurate: boolean;\r\n\tsetIsAccurate: (arg0: boolean) => void;\r\n}\r\n\r\nconst YearSlider: React.FC<Props> = observer(\r\n\t({ range, setRange, isAccurate, setIsAccurate }) => {\r\n\t\tconst { list } = listStore;\r\n\t\tconst { isSmallScreen } = userStore;\r\n\t\tconst { defaultRange, setDefaultRange, userOptions } = optionsStore;\r\n\r\n\t\tconst [value, setValue] = useState(defaultRange);\r\n\r\n\t\tconst sliderRange: [number, number] = useMemo(() => {\r\n\t\t\tconst dates = Object.values(list).map((item: ExpenseItem) => item.date);\r\n\t\t\treturn [Math.min(...dates), Math.max(...dates)];\r\n\t\t}, [list]);\r\n\r\n\t\tconst marks: { [key: number]: string } = useMemo(() => {\r\n\t\t\tconst start = dayjs(sliderRange[0]).startOf('day');\r\n\t\t\tconst end = dayjs(sliderRange[1]).endOf('day');\r\n\t\t\tconst marks: { [key: number]: string } = {};\r\n\t\t\tlet currentDate = start;\r\n\t\t\tif (isAccurate) {\r\n\t\t\t\twhile (currentDate.isBefore(end) || currentDate.isSame(end, 'day')) {\r\n\t\t\t\t\tmarks[currentDate.valueOf()] =\r\n\t\t\t\t\t\tcurrentDate.date() === 1\r\n\t\t\t\t\t\t\t? currentDate.month() === 0\r\n\t\t\t\t\t\t\t\t? currentDate.format('YYYY')\r\n\t\t\t\t\t\t\t\t: currentDate.format('M')\r\n\t\t\t\t\t\t\t: ' ';\r\n\t\t\t\t\tcurrentDate = currentDate.add(1, 'day').startOf('day');\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\twhile (currentDate.isBefore(end) || currentDate.isSame(end, 'month')) {\r\n\t\t\t\t\tmarks[currentDate.valueOf()] =\r\n\t\t\t\t\t\tcurrentDate.month() === 0 ? currentDate.format('YYYY') : ' ';\r\n\t\t\t\t\tcurrentDate = currentDate.add(1, 'month').startOf('month');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn marks;\r\n\t\t}, [sliderRange, isAccurate]);\r\n\r\n\t\tuseEffect(() => {\r\n\t\t\tsetDefaultRange(sliderRange);\r\n\t\t}, [sliderRange, setDefaultRange]);\r\n\r\n\t\tuseEffect(() => {\r\n\t\t\tsetRange(defaultRange);\r\n\t\t}, [defaultRange, setRange]);\r\n\r\n\t\tconst handleRangeChanging = useCallback(\r\n\t\t\t(values: number[]) => {\r\n\t\t\t\tsetRange(values);\r\n\t\t\t},\r\n\t\t\t[setRange]\r\n\t\t);\r\n\r\n\t\tuseEffect(() => {\r\n\t\t\tsetValue(range);\r\n\t\t}, [range]);\r\n\r\n\t\tuseEffect(() => {\r\n\t\t\tisSmallScreen && setIsAccurate(false);\r\n\t\t}, [isSmallScreen, setIsAccurate]);\r\n\r\n\t\tuseEffect(() => {\r\n\t\t\t!isAccurate &&\r\n\t\t\t\tsetRange([\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\tdayjs.max([\r\n\t\t\t\t\t\t\tdayjs(range[0]).startOf('month'),\r\n\t\t\t\t\t\t\tdayjs(defaultRange[0]),\r\n\t\t\t\t\t\t]) as dayjs.Dayjs\r\n\t\t\t\t\t).valueOf(),\r\n\t\t\t\t\t(\r\n\t\t\t\t\t\tdayjs.min([\r\n\t\t\t\t\t\t\tdayjs(range[1]).endOf('month'),\r\n\t\t\t\t\t\t\tdayjs(defaultRange[1]),\r\n\t\t\t\t\t\t]) as dayjs.Dayjs\r\n\t\t\t\t\t).valueOf(),\r\n\t\t\t\t]);\r\n\t\t\t// eslint-disable-next-line\r\n\t\t}, [isAccurate]);\r\n\r\n\t\treturn dayjs(defaultRange[1]).diff(dayjs(defaultRange[0]), 'hours') >=\r\n\t\t\t48 ? (\r\n\t\t\t<Flex\r\n\t\t\t\tgap={16}\r\n\t\t\t\talign='center'\r\n\t\t\t\tstyle={{ inlineSize: '100%' }}\r\n\t\t\t>\r\n\t\t\t\t<Segmented\r\n\t\t\t\t\tsize={isSmallScreen ? 'small' : 'middle'}\r\n\t\t\t\t\tdefaultValue={isAccurate}\r\n\t\t\t\t\tvalue={isAccurate}\r\n\t\t\t\t\tonChange={setIsAccurate}\r\n\t\t\t\t\toptions={[\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlabel: (\r\n\t\t\t\t\t\t\t\t<TooltipAntd title={languages.byMonth[userOptions.language]}>\r\n\t\t\t\t\t\t\t\t\t<ZoomOutOutlined />\r\n\t\t\t\t\t\t\t\t</TooltipAntd>\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\tvalue: false,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlabel: (\r\n\t\t\t\t\t\t\t\t<TooltipAntd title={languages.byDay[userOptions.language]}>\r\n\t\t\t\t\t\t\t\t\t<ZoomInOutlined />\r\n\t\t\t\t\t\t\t\t</TooltipAntd>\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\tvalue: true,\r\n\t\t\t\t\t\t\tdisabled: isSmallScreen,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t]}\r\n\t\t\t\t/>\r\n\t\t\t\t<Flex\r\n\t\t\t\t\tvertical\r\n\t\t\t\t\talign='stretch'\r\n\t\t\t\t\tstyle={{ inlineSize: '100%' }}\r\n\t\t\t\t>\r\n\t\t\t\t\t<SliderDiagram />\r\n\t\t\t\t\t<Slider\r\n\t\t\t\t\t\trange\r\n\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\tmarks={marks}\r\n\t\t\t\t\t\tstep={null}\r\n\t\t\t\t\t\tdots={true}\r\n\t\t\t\t\t\ttooltip={{\r\n\t\t\t\t\t\t\tformatter: (value: number | undefined) => (\r\n\t\t\t\t\t\t\t\t<>{dayjs(value).format(isAccurate ? 'DD.MM.YY' : 'MM.YY')}</>\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tmin={sliderRange[0]}\r\n\t\t\t\t\t\tmax={sliderRange[1]}\r\n\t\t\t\t\t\tdefaultValue={defaultRange}\r\n\t\t\t\t\t\tonChange={setValue}\r\n\t\t\t\t\t\tonChangeComplete={handleRangeChanging}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Flex>\r\n\t\t\t</Flex>\r\n\t\t) : (\r\n\t\t\t<></>\r\n\t\t);\r\n\t}\r\n);\r\n\r\nexport default memo(YearSlider);\r\n","import React, { useMemo } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { userStore } from 'utils/userStore';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport languages from 'settings/languages';\r\nimport { getSymbolAndPrice } from 'utils/utils';\r\nimport { Flex } from 'antd';\r\nimport dayjs from 'dayjs';\r\nimport {\r\n\tChart,\r\n\tTooltip,\r\n\tBarController,\r\n\tBarElement,\r\n\tCategoryScale,\r\n\tLinearScale,\r\n} from 'chart.js';\r\nimport { getValuesForBarDiagram } from 'utils/transformData';\r\nimport { optionsStore } from 'utils/optionsStore';\r\nimport { listStore } from 'utils/listStore';\r\nimport { Interval } from 'settings/interfaces';\r\nChart.register(Tooltip, BarController, BarElement, CategoryScale, LinearScale);\r\n\r\ninterface Props {\r\n\tmode: Interval;\r\n\tsetMode: (arg0: Interval) => void;\r\n}\r\n\r\nconst DiagramBar: React.FC<Props> = observer(({ mode, setMode }) => {\r\n\tconst { isSmallScreen } = userStore;\r\n\tconst { list } = listStore;\r\n\tconst { statsOptions, userOptions, setStatsRange } = optionsStore;\r\n\tconst { currency, language } = userOptions;\r\n\r\n\tconst { range } = statsOptions;\r\n\r\n\tconst values: number[] | { [key: string]: number } = useMemo(() => {\r\n\t\treturn getValuesForBarDiagram(list, currency, mode, dayjs(range[0]).year());\r\n\t}, [currency, mode, range, list]);\r\n\r\n\tconst colors = useMemo(\r\n\t\t() =>\r\n\t\t\tmode === 'year'\r\n\t\t\t\t? Object.keys(values).map((key: string) => {\r\n\t\t\t\t\t\tconst date = dayjs(key);\r\n\t\t\t\t\t\treturn date >= dayjs(range[0]).startOf('year') &&\r\n\t\t\t\t\t\t\tdate <= dayjs(range[1]).endOf('year')\r\n\t\t\t\t\t\t\t? '#f00'\r\n\t\t\t\t\t\t\t: '#f007';\r\n\t\t\t\t  })\r\n\t\t\t\t: Object.keys(values).map((key: string) => {\r\n\t\t\t\t\t\tconst month = Number(key);\r\n\t\t\t\t\t\treturn month >= dayjs(range[0]).startOf('month').month() &&\r\n\t\t\t\t\t\t\tmonth <= dayjs(range[1]).endOf('month').month()\r\n\t\t\t\t\t\t\t? '#f00'\r\n\t\t\t\t\t\t\t: '#f005';\r\n\t\t\t\t  }),\r\n\r\n\t\t[range, values, mode]\r\n\t);\r\n\r\n\tconst data = {\r\n\t\tlabels: mode === 'month' ? languages.months[language] : Object.keys(values),\r\n\t\tdatasets: [\r\n\t\t\t{\r\n\t\t\t\tlabel: getSymbolAndPrice(currency),\r\n\t\t\t\tdata: Object.values(values),\r\n\t\t\t\tbackgroundColor: colors,\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n\r\n\tconst options = {\r\n\t\tplugins: {\r\n\t\t\tlegend: {\r\n\t\t\t\tdisplay: false,\r\n\t\t\t},\r\n\t\t},\r\n\t\tonClick: (_: any, chartElements: any) => {\r\n\t\t\tif (chartElements.length) {\r\n\t\t\t\tconst index = chartElements[0].index;\r\n\r\n\t\t\t\tconst newRangeItem =\r\n\t\t\t\t\tmode === 'year'\r\n\t\t\t\t\t\t? [\r\n\t\t\t\t\t\t\t\tdayjs(range[0])\r\n\t\t\t\t\t\t\t\t\t.year(Number(data.labels[index]))\r\n\t\t\t\t\t\t\t\t\t.startOf('year')\r\n\t\t\t\t\t\t\t\t\t.valueOf(),\r\n\t\t\t\t\t\t\t\tdayjs(range[0])\r\n\t\t\t\t\t\t\t\t\t.year(Number(data.labels[index]))\r\n\t\t\t\t\t\t\t\t\t.endOf('year')\r\n\t\t\t\t\t\t\t\t\t.valueOf(),\r\n\t\t\t\t\t\t  ]\r\n\t\t\t\t\t\t: [\r\n\t\t\t\t\t\t\t\tdayjs(range[0]).month(index).startOf('month').valueOf(),\r\n\t\t\t\t\t\t\t\tdayjs(range[0]).month(index).endOf('month').valueOf(),\r\n\t\t\t\t\t\t  ];\r\n\r\n\t\t\t\tmode === 'year' && setMode('month');\r\n\t\t\t\tsetStatsRange(newRangeItem);\r\n\t\t\t}\r\n\t\t},\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Flex style={{ inlineSize: isSmallScreen ? 'unset' : '50%' }}>\r\n\t\t\t<Bar\r\n\t\t\t\tdata={data}\r\n\t\t\t\toptions={options}\r\n\t\t\t/>\r\n\t\t</Flex>\r\n\t);\r\n});\r\n\r\nexport default DiagramBar;\r\n","import React, { useMemo } from 'react';\r\nimport { Value } from '../settings/interfaces';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { userStore } from 'utils/userStore';\r\nimport { Flex } from 'antd';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { getSymbolAndPrice } from 'utils/utils';\r\nimport {\r\n\tChart,\r\n\tArcElement,\r\n\tPieController,\r\n\tTooltip,\r\n\tLegend,\r\n\tTitle,\r\n} from 'chart.js';\r\nimport { getValuesForPieDiagram } from 'utils/transformData';\r\nimport { optionsStore } from 'utils/optionsStore';\r\nimport { listStore } from 'utils/listStore';\r\nimport { categoryStore } from 'utils/categoryStore';\r\nChart.register(ArcElement, PieController, Tooltip, Legend, Title);\r\n\r\nconst DiagramPie: React.FC = observer(() => {\r\n\tconst { isSmallScreen } = userStore;\r\n\tconst { list } = listStore;\r\n\tconst { userOptions, statsOptions } = optionsStore;\r\n\tconst { currency } = userOptions;\r\n\tconst { categories } = categoryStore;\r\n\r\n\tconst { range } = statsOptions;\r\n\r\n\tconst valuesByCategory: Value[] = useMemo(\r\n\t\t() => getValuesForPieDiagram(list, range, currency),\r\n\t\t[list, currency, range]\r\n\t);\r\n\r\n\tconst [names, colors, values] = useMemo(() => {\r\n\t\treturn [\r\n\t\t\tvaluesByCategory.map((value: Value) => categories[value.categoryId].name),\r\n\t\t\tvaluesByCategory.map(\r\n\t\t\t\t(value: Value) => categories[value.categoryId].color\r\n\t\t\t),\r\n\t\t\tvaluesByCategory.map((value: Value) => Math.round(value.value)),\r\n\t\t];\r\n\t}, [categories, valuesByCategory]);\r\n\r\n\tconst data = {\r\n\t\tlabels: names,\r\n\t\tdatasets: [\r\n\t\t\t{\r\n\t\t\t\tlabel: getSymbolAndPrice(currency),\r\n\t\t\t\tdata: values,\r\n\t\t\t\tbackgroundColor: colors,\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n\r\n\tconst options = {\r\n\t\tplugins: {\r\n\t\t\tlegend: {\r\n\t\t\t\tdisplay: true,\r\n\t\t\t\tposition: 'right' as const,\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Flex\r\n\t\t\tstyle={{\r\n\t\t\t\tinlineSize: isSmallScreen ? 'unset' : '40%',\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<Pie\r\n\t\t\t\tdata={data}\r\n\t\t\t\toptions={options}\r\n\t\t\t/>\r\n\t\t</Flex>\r\n\t);\r\n});\r\n\r\nexport default DiagramPie;\r\n","import { Card, Statistic, Typography } from 'antd';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { memo, useMemo } from 'react';\r\nimport { listStore } from 'utils/listStore';\r\nimport { optionsStore } from 'utils/optionsStore';\r\nimport { getTotalInCurrentRange } from 'utils/transformData';\r\nimport { userStore } from 'utils/userStore';\r\nimport { getSymbolAndPrice } from 'utils/utils';\r\nimport dayjs from 'dayjs';\r\n\r\nconst StatsCard: React.FC = observer(() => {\r\n\tconst { isSmallScreen } = userStore;\r\n\tconst { list } = listStore;\r\n\tconst { statsOptions, userOptions } = optionsStore;\r\n\r\n\tconst { range, isAccurate } = statsOptions;\r\n\tconst { currency } = userOptions;\r\n\r\n\tconst value = useMemo(\r\n\t\t() => getTotalInCurrentRange(list, range, currency),\r\n\t\t[list, range, currency]\r\n\t);\r\n\r\n\tconst cardTitle = useMemo(() => {\r\n\t\tconst format = isAccurate ? 'DD.MM.YY' : 'MM.YY';\r\n\t\treturn (\r\n\t\t\t<Typography.Text\r\n\t\t\t\ttype='secondary'\r\n\t\t\t\tstyle={{ fontSize: isSmallScreen ? '.8em' : '1em' }}\r\n\t\t\t>\r\n\t\t\t\t{dayjs(range[0]).format(format)}\r\n\t\t\t\t{range[0] !== range[1] ? `-${dayjs(range[1]).format(format)}` : ''}\r\n\t\t\t</Typography.Text>\r\n\t\t);\r\n\t}, [isAccurate, range, isSmallScreen]);\r\n\r\n\treturn (\r\n\t\t<Card bordered>\r\n\t\t\t<Statistic\r\n\t\t\t\ttitle={cardTitle}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tprefix={getSymbolAndPrice(currency)}\r\n\t\t\t\tvalueStyle={{\r\n\t\t\t\t\tcolor: '#f00',\r\n\t\t\t\t\tfontSize: isSmallScreen ? '1em' : '1.5em',\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</Card>\r\n\t);\r\n});\r\n\r\nexport default memo(StatsCard);\r\n","import React, { useState, useCallback, memo, useEffect, useMemo } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { listStore } from 'utils/listStore';\r\nimport { Empty, Flex } from 'antd';\r\nimport DiagramBar from '../components/DiagramBar';\r\nimport DiagramPie from 'components/DiagramPie';\r\nimport { userStore } from 'utils/userStore';\r\nimport { optionsStore } from 'utils/optionsStore';\r\nimport dayjs from 'dayjs';\r\nimport isBetween from 'dayjs/plugin/isBetween';\r\nimport YearSlider from 'components/YearSlider';\r\nimport { Interval } from 'settings/interfaces';\r\nimport LargeSpin from 'components/LargeSpin';\r\nimport StatsCard from 'components/StatsCard';\r\nimport ResetButton from 'components/ResetButton';\r\n\r\ndayjs.extend(isBetween);\r\n\r\nconst Stats: React.FC = observer(() => {\r\n\tconst { list } = listStore;\r\n\tconst { isSmallScreen, loading, tourRefs } = userStore;\r\n\tconst { statsOptions, defaultRange, setStatsRange, setIsStatsAccurate } =\r\n\t\toptionsStore;\r\n\r\n\tconst { range, isAccurate } = statsOptions;\r\n\r\n\tconst [mode, setMode] = useState<Interval>('year');\r\n\r\n\tconst resetRange = useCallback(() => {\r\n\t\tsetMode('year');\r\n\t\tsetStatsRange(defaultRange);\r\n\t}, [setMode, defaultRange, setStatsRange]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst resetRangeWithEsc = (event: KeyboardEvent) => {\r\n\t\t\tif (event.key === 'Escape') {\r\n\t\t\t\tresetRange();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\twindow.addEventListener('keydown', resetRangeWithEsc);\r\n\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('keydown', resetRangeWithEsc);\r\n\t\t};\r\n\t}, [resetRange]);\r\n\r\n\tconst isRangeChanged = useMemo(\r\n\t\t() => range[0] !== defaultRange[0] || range[1] !== defaultRange[1],\r\n\t\t[range, defaultRange]\r\n\t);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (dayjs(range[0]).year() !== dayjs(range[1]).year()) {\r\n\t\t\tsetMode('year');\r\n\t\t} else {\r\n\t\t\tsetMode('month');\r\n\t\t}\r\n\t}, [range]);\r\n\r\n\tconst PanelJSX = (\r\n\t\t<Flex gap={16}>\r\n\t\t\t<StatsCard />\r\n\t\t\t<ResetButton\r\n\t\t\t\treset={resetRange}\r\n\t\t\t\tdisabled={!isRangeChanged}\r\n\t\t\t/>\r\n\t\t</Flex>\r\n\t);\r\n\r\n\tconst DiagramsJSX = (\r\n\t\t<Flex\r\n\t\t\tvertical\r\n\t\t\tgap={16}\r\n\t\t\talign='stretch'\r\n\t\t\tstyle={{ inlineSize: '100%' }}\r\n\t\t>\r\n\t\t\t<Flex\r\n\t\t\t\tref={tourRefs[8]}\r\n\t\t\t\tstyle={{ inlineSize: '100%' }}\r\n\t\t\t>\r\n\t\t\t\t<YearSlider\r\n\t\t\t\t\tsetIsAccurate={setIsStatsAccurate}\r\n\t\t\t\t\tisAccurate={isAccurate}\r\n\t\t\t\t\trange={range}\r\n\t\t\t\t\tsetRange={setStatsRange}\r\n\t\t\t\t/>\r\n\t\t\t</Flex>\r\n\t\t\t<Flex\r\n\t\t\t\tref={tourRefs[7]}\r\n\t\t\t\talign='center'\r\n\t\t\t\tjustify='space-between'\r\n\t\t\t\tvertical={isSmallScreen}\r\n\t\t\t>\r\n\t\t\t\t<DiagramBar\r\n\t\t\t\t\tmode={mode}\r\n\t\t\t\t\tsetMode={setMode}\r\n\t\t\t\t/>\r\n\t\t\t\t<DiagramPie />\r\n\t\t\t</Flex>\r\n\t\t</Flex>\r\n\t);\r\n\r\n\treturn loading ? (\r\n\t\t<LargeSpin />\r\n\t) : Object.keys(list).length ? (\r\n\t\t<Flex\r\n\t\t\tvertical\r\n\t\t\tgap={32}\r\n\t\t>\r\n\t\t\t{PanelJSX}\r\n\t\t\t{DiagramsJSX}\r\n\t\t</Flex>\r\n\t) : (\r\n\t\t<Empty\r\n\t\t\timage={Empty.PRESENTED_IMAGE_SIMPLE}\r\n\t\t\tdescription={''}\r\n\t\t/>\r\n\t);\r\n});\r\n\r\nexport default memo(Stats);\r\n"],"names":["observer","_ref","disabled","reset","userOptions","optionsStore","isSmallScreen","userStore","_jsx","Tooltip","title","languages","language","children","Button","onClick","size","ReloadOutlined","SliderDiagram","list","listStore","defaultRange","valuesByMonth","useMemo","getValuesByMonth","data","labels","Array","length","fill","datasets","Line","style","inlineSize","options","plugins","legend","display","tooltip","enabled","scales","x","grid","y","elements","point","radius","line","cubicInterpolationMode","borderColor","aspectRatio","memo","Chart","register","LineElement","LineController","CategoryScale","LinearScale","PointElement","dayjs","minMax","YearSlider","range","setRange","isAccurate","setIsAccurate","setDefaultRange","value","setValue","useState","sliderRange","dates","Object","values","map","item","date","Math","min","max","marks","start","startOf","end","endOf","currentDate","isBefore","isSame","valueOf","month","format","add","useEffect","handleRangeChanging","useCallback","diff","_jsxs","Flex","gap","align","Segmented","defaultValue","onChange","label","TooltipAntd","byMonth","ZoomOutOutlined","byDay","ZoomInOutlined","vertical","Slider","step","dots","formatter","_Fragment","onChangeComplete","BarController","BarElement","mode","setMode","statsOptions","setStatsRange","currency","getValuesForBarDiagram","year","colors","keys","key","Number","months","getSymbolAndPrice","backgroundColor","_","chartElements","index","newRangeItem","Bar","ArcElement","PieController","Legend","Title","categories","categoryStore","valuesByCategory","getValuesForPieDiagram","names","categoryId","name","color","round","Pie","position","StatsCard","getTotalInCurrentRange","cardTitle","Typography","Text","type","fontSize","concat","Card","bordered","Statistic","prefix","valueStyle","isBetween","Stats","loading","tourRefs","setIsStatsAccurate","resetRange","resetRangeWithEsc","event","window","addEventListener","removeEventListener","isRangeChanged","PanelJSX","ResetButton","DiagramsJSX","ref","justify","DiagramBar","DiagramPie","LargeSpin","Empty","image","PRESENTED_IMAGE_SIMPLE","description"],"sourceRoot":""}