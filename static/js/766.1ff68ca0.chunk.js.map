{"version":3,"file":"static/js/766.1ff68ca0.chunk.js","mappings":"iRAOA,MAAMA,GAA0BC,EAAAA,EAAAA,KAAS,KACxC,MAAM,KAAEC,GAASC,EAAAA,WACX,aAAEC,GAAiBC,EAAAA,aAEnBC,GAAsDC,EAAAA,EAAAA,UAC3D,KAAMC,EAAAA,EAAAA,IAAiBN,EAAME,IAC7B,CAACF,EAAME,IAGFK,EAAO,CACZC,OAAQ,IAAIC,MAAML,EAAcM,QAAQC,KAAK,IAC7CC,SAAU,CACT,CACCL,KAAMH,KAwCT,OACCS,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CACJC,MAAO,CAAEC,WAAY,QACrBT,KAAMA,EACNU,QAvCc,CACfC,QAAS,CACRC,OAAQ,CACPC,SAAS,GAEVC,QAAS,CACRC,SAAS,IAGXC,OAAQ,CACPC,EAAG,CACFJ,SAAS,EACTK,KAAM,CACLL,SAAS,IAGXM,EAAG,CACFN,SAAS,EACTK,KAAM,CACLL,SAAS,KAIZO,SAAU,CACTC,MAAO,CACNC,OAAQ,GAETC,KAAM,CACLC,uBAAwB,WACxBC,YAAa,UAGfC,YAAa,KAQX,IAIJ,GAAeC,EAAAA,EAAAA,MAAKpC,GCjDpBqC,EAAAA,GAAMC,SACLC,EAAAA,EACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,IAGDC,IAAAA,OAAaC,KAOb,MAAMC,GAA8B9C,EAAAA,EAAAA,KAAS+C,IAA0B,IAAzB,MAAEC,EAAK,SAAEC,GAAUF,EAChE,MAAM,KAAE9C,GAASC,EAAAA,WACX,aAAEC,EAAY,gBAAE+C,GAAoB9C,EAAAA,cAEnC+C,EAAOC,IAAYC,EAAAA,EAAAA,UAASlD,GAE7BmD,GAAgChD,EAAAA,EAAAA,UAAQ,KAC7C,MAAMiD,EAAQC,OAAOC,OAAOxD,GAAMyD,KAAKC,GAAsBA,EAAKC,OAClE,MAAO,CAACC,KAAKC,OAAOP,GAAQM,KAAKE,OAAOR,GAAO,GAC7C,CAACtD,IAEE+D,GAAmC1D,EAAAA,EAAAA,UAAQ,KAChD,MAAM2D,EAAQrB,IAAMU,EAAY,IAAIY,QAAQ,OACtCC,EAAMvB,IAAMU,EAAY,IAAIc,MAAM,OAClCJ,EAAmC,CAAC,EAC1C,IAAIK,EAAcJ,EAElB,KAAOI,EAAYC,SAASH,IAAQE,EAAYE,OAAOJ,EAAK,UAC3DH,EAAMK,EAAYG,WACO,IAAxBH,EAAYI,QAAgBJ,EAAYK,OAAO,QAAU,IAC1DL,EAAcA,EAAYM,IAAI,EAAG,SAAST,QAAQ,SAEnD,OAAOF,CAAK,GACV,CAACV,KAEJsB,EAAAA,EAAAA,YAAU,KACT1B,EAAgBI,EAAY,GAC1B,CAACA,EAAaJ,KAEjB0B,EAAAA,EAAAA,YAAU,KACT3B,EAAS9C,EAAa,GACpB,CAACA,EAAc8C,IAElB,MAAM4B,GAAsBC,EAAAA,EAAAA,cAC1BrB,IACAR,EAASQ,EAAO,GAEjB,CAACR,IAOF,OAJA2B,EAAAA,EAAAA,YAAU,KACTxB,EAASJ,EAAM,GACb,CAACA,IAEGJ,IAAMzC,EAAa,IAAI4E,KAAKnC,IAAMzC,EAAa,IAAK,UAAY,IACtE6E,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACJC,UAAQ,EACRC,MAAM,UACNnE,MAAO,CAAEC,WAAY,QAASmE,SAAA,EAE9BtE,EAAAA,EAAAA,KAACf,EAAa,KACde,EAAAA,EAAAA,KAACuE,EAAAA,EAAM,CACNrC,OAAK,EACLG,MAAOA,EACPa,MAAOA,EACPsB,KAAM,KACNC,MAAM,EACNjE,QAAS,CACRkE,UAAYrC,GACXP,IAAMO,GAAOuB,OAAO,UAEtBZ,IAAKR,EAAY,GACjBS,IAAKT,EAAY,GACjBmC,aAActF,EACduF,SAAUtC,EACVuC,iBAAkBd,QAIpB/D,EAAAA,EAAAA,KAAA8E,EAAAA,SAAA,GACA,IAGF,GAAezD,EAAAA,EAAAA,MAAKW,E,uMCzFpBV,EAAAA,GAAMC,SAASC,EAAAA,EAASuD,EAAAA,GAAeC,EAAAA,GAAYrD,EAAAA,GAAeC,EAAAA,IAOlE,MAuFA,GAvFoC1C,EAAAA,EAAAA,KAAS+C,IAAwB,IAAvB,KAAEgD,EAAI,QAAEC,GAASjD,EAC9D,MAAM,cAAEkD,GAAkBC,EAAAA,WACpB,KAAEjG,GAASC,EAAAA,WACX,aAAEiG,EAAY,YAAEC,EAAW,cAAEC,GAAkBjG,EAAAA,cAC/C,SAAEkG,EAAQ,SAAEC,GAAaH,GAEzB,MAAEpD,GAAUmD,EAEZ1C,GAA+CnD,EAAAA,EAAAA,UAAQ,KACrDkG,EAAAA,EAAAA,IAAuBvG,EAAMqG,EAAUP,EAAMnD,IAAMI,EAAM,IAAIyD,SAClE,CAACH,EAAUP,EAAM/C,EAAO/C,IAErByG,GAASpG,EAAAA,EAAAA,UACd,IACU,SAATyF,EACGvC,OAAOmD,KAAKlD,GAAQC,KAAKkD,IACzB,MAAMhD,EAAOhB,IAAMgE,GACnB,OAAOhD,GAAQhB,IAAMI,EAAM,IAAIkB,QAAQ,SACtCN,GAAQhB,IAAMI,EAAM,IAAIoB,MAAM,QAC5B,OACA,OAAO,IAEVZ,OAAOmD,KAAKlD,GAAQC,KAAKkD,IACzB,MAAMnC,EAAQoC,OAAOD,GACrB,OAAOnC,GAAS7B,IAAMI,EAAM,IAAIkB,QAAQ,SAASO,SAChDA,GAAS7B,IAAMI,EAAM,IAAIoB,MAAM,SAASK,QACtC,OACA,OAAO,KAGd,CAACzB,EAAOS,EAAQsC,IAGXvF,EAAO,CACZC,OAAiB,UAATsF,EAAmBe,EAAAA,EAAUC,OAAOR,GAAY/C,OAAOmD,KAAKlD,GACpE5C,SAAU,CACT,CACCmG,OAAOC,EAAAA,EAAAA,IAAkBX,GACzB9F,KAAMgD,OAAOC,OAAOA,GACpByD,gBAAiBR,KAKdxF,EAAU,CACfC,QAAS,CACRC,OAAQ,CACPC,SAAS,IAGX8F,QAASA,CAACC,EAAQC,KACjB,GAAIA,EAAc1G,OAAQ,CACzB,MAAM2G,EAAQD,EAAc,GAAGC,MAEzBC,EACI,SAATxB,EACG,CACAnD,IAAMI,EAAM,IACVyD,KAAKI,OAAOrG,EAAKC,OAAO6G,KACxBpD,QAAQ,QACRM,UACF5B,IAAMI,EAAM,IACVyD,KAAKI,OAAOrG,EAAKC,OAAO6G,KACxBlD,MAAM,QACNI,WAEF,CACA5B,IAAMI,EAAM,IAAIyB,MAAM6C,GAAOpD,QAAQ,SAASM,UAC9C5B,IAAMI,EAAM,IAAIyB,MAAM6C,GAAOlD,MAAM,SAASI,WAGvC,SAATuB,GAAmBC,EAAQ,SAC3BK,EAAckB,EACf,IAIF,OACCzG,EAAAA,EAAAA,KAACmE,EAAAA,EAAI,CAACjE,MAAO,CAAEC,WAAYgF,EAAgB,QAAU,OAAQb,UAC5DtE,EAAAA,EAAAA,KAAC0G,EAAAA,GAAG,CACHhH,KAAMA,EACNU,QAASA,KAEJ,I,cC3FTkB,EAAAA,GAAMC,SAASoF,EAAAA,GAAYC,EAAAA,GAAepF,EAAAA,EAASqF,EAAAA,GAAQC,EAAAA,IAE3D,MA0DA,GA1D6B5H,EAAAA,EAAAA,KAAS,KACrC,MAAM,cAAEiG,GAAkBC,EAAAA,WACpB,KAAEjG,GAASC,EAAAA,WACX,YAAEkG,EAAW,aAAED,GAAiB/F,EAAAA,cAChC,SAAEkG,GAAaF,GACf,WAAEyB,GAAeC,EAAAA,eAEjB,MAAE9E,GAAUmD,EAEZ4B,GAA4BzH,EAAAA,EAAAA,UACjC,KAAM0H,EAAAA,EAAAA,IAAuB/H,EAAM+C,EAAOsD,IAC1C,CAACrG,EAAMqG,EAAUtD,KAGXiF,EAAOvB,EAAQjD,IAAUnD,EAAAA,EAAAA,UAAQ,IAChC,CACNyH,EAAiBrE,KAAKP,GAAiB0E,EAAW1E,EAAM+E,YAAYC,OACpEJ,EAAiBrE,KACfP,GAAiB0E,EAAW1E,EAAM+E,YAAYE,QAEhDL,EAAiBrE,KAAKP,GAAiBU,KAAKwE,MAAMlF,EAAMA,WAEvD,CAAC0E,EAAYE,IAEVvH,EAAO,CACZC,OAAQwH,EACRpH,SAAU,CACT,CACCmG,OAAOC,EAAAA,EAAAA,IAAkBX,GACzB9F,KAAMiD,EACNyD,gBAAiBR,KAcpB,OACC5F,EAAAA,EAAAA,KAACmE,EAAAA,EAAI,CACJjE,MAAO,CACNC,WAAYgF,EAAgB,QAAU,OACrCb,UAEFtE,EAAAA,EAAAA,KAACwH,EAAAA,GAAG,CACH9H,KAAMA,EACNU,QAjBa,CACfC,QAAS,CACRC,OAAQ,CACPC,SAAS,EACTkH,SAAU,cAeL,I,6FC5DT,MAAMC,GAA6BxI,EAAAA,EAAAA,KAAS+C,IAAqB,IAApB,WAAE0F,GAAY1F,EAC1D,MAAM,cAAEkD,GAAkBC,EAAAA,WACpB,KAAEjG,GAASC,EAAAA,WACX,aAAEiG,EAAY,YAAEC,EAAW,aAAEjG,GAAiBC,EAAAA,cAE9C,MAAE4C,GAAUmD,GACZ,SAAEG,GAAaF,EAEfjD,GAAQ7C,EAAAA,EAAAA,UACb,KAAMoI,EAAAA,EAAAA,IAAuBzI,EAAM+C,EAAOsD,IAC1C,CAACrG,EAAM+C,EAAOsD,IAGTqC,GAAYrI,EAAAA,EAAAA,UAAQ,KACzB,MAAMoE,EAAgB,WACtB,OACCM,EAAAA,EAAAA,MAAC4D,EAAAA,EAAWC,KAAI,CACfC,KAAK,YACL9H,MAAO,CAAE+H,SAAU9C,EAAgB,OAAS,SAAUb,SAAA,CAErDxC,IAAMI,EAAM,IAAI0B,OAAOA,GACvB1B,EAAM,KAAOA,EAAM,GAAE,IAAAgG,OAAOpG,IAAMI,EAAM,IAAI0B,OAAOA,IAAY,KAC/C,GAEjB,CAAC1B,EAAOiD,IAELgD,GAAiB3I,EAAAA,EAAAA,UACtB,IAAM0C,EAAM,KAAO7C,EAAa,IAAM6C,EAAM,KAAO7C,EAAa,IAChE,CAAC6C,EAAO7C,IAGT,OACCW,EAAAA,EAAAA,KAACoI,EAAAA,EAAI,CAACC,UAAQ,EAAA/D,UACbtE,EAAAA,EAAAA,KAACsI,EAAAA,EAAS,CACTC,OACCvI,EAAAA,EAAAA,KAACwB,EAAAA,EAAO,CACPgH,UAAU,QACVlB,MAAM,QACNmB,KAAMN,EACNI,OACCvI,EAAAA,EAAAA,KAAC0I,EAAAA,EAAc,CACdrC,QAASsB,EACTzH,MAAO,CACNyI,MAAOxD,EAAgB,IAAM,OAC7ByD,OAAQ,cAGVtE,SAEAuD,IAGHxF,MAAOA,EACPwG,QAAQ1C,EAAAA,EAAAA,IAAkBX,GAC1BsD,WAAY,CACXxB,MAAO,OACPW,SAAU9C,EAAgB,QAAU,aAGhC,IAIT,GAAe9D,EAAAA,EAAAA,MAAKqG,GC/DpB5F,IAAAA,OAAaiH,KAEb,MAAMC,GAAkB9J,EAAAA,EAAAA,KAAS,KAChC,MAAM,KAAEC,GAASC,EAAAA,WACX,cAAE+F,EAAa,QAAE8D,EAAO,SAAEC,GAAa9D,EAAAA,WACvC,aAAEC,EAAY,aAAEhG,EAAY,cAAEkG,GAAkBjG,EAAAA,cAEhD,MAAE4C,GAAUmD,GAEXJ,EAAMC,IAAW3C,EAAAA,EAAAA,UAAmB,QAErCoF,GAAa3D,EAAAA,EAAAA,cAAY,KAC9BkB,EAAQ,QACRK,EAAclG,EAAa,GACzB,CAAC6F,EAAS7F,EAAckG,KAE3BzB,EAAAA,EAAAA,YAAU,KACT,MAAMqF,EAAqBC,IACR,WAAdA,EAAMtD,KACT6B,GACD,EAKD,OAFA0B,OAAOC,iBAAiB,UAAWH,GAE5B,KACNE,OAAOE,oBAAoB,UAAWJ,EAAkB,CACxD,GACC,CAACxB,KAEJ7D,EAAAA,EAAAA,YAAU,KACLhC,IAAMI,EAAM,IAAIyD,SAAW7D,IAAMI,EAAM,IAAIyD,OAC9CT,EAAQ,QAERA,EAAQ,QACT,GACE,CAAChD,IAEJ,MAAMsH,GACLtF,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACJC,UAAQ,EACRqF,IAAK,GACLpF,MAAM,UACNnE,MAAO,CAAEC,WAAY,QAASmE,SAAA,EAE9BtE,EAAAA,EAAAA,KAACmE,EAAAA,EAAI,CACJuF,IAAKR,EAAS,GACdhJ,MAAO,CAAEC,WAAY,QAASmE,UAE9BtE,EAAAA,EAAAA,KAACgC,EAAAA,EAAU,CACVE,MAAOA,EACPC,SAAUoD,OAGZrB,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACJuF,IAAKR,EAAS,GACd7E,MAAM,SACNsF,QAAQ,gBACRvF,SAAUe,EAAcb,SAAA,EAExBtE,EAAAA,EAAAA,KAAC4J,EAAU,CACV3E,KAAMA,EACNC,QAASA,KAEVlF,EAAAA,EAAAA,KAAC6J,EAAU,UAKd,OAAOZ,GACNjJ,EAAAA,EAAAA,KAAC8J,EAAAA,EAAS,IACPpH,OAAOmD,KAAK1G,GAAMU,QACrBqE,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACJC,UAAQ,EACRqF,IAAK,GACLpF,MAAM,QAAOC,SAAA,EAEbtE,EAAAA,EAAAA,KAAC0H,EAAS,CAACC,WAAYA,IACtB6B,MAGFxJ,EAAAA,EAAAA,KAAC+J,EAAAA,EAAK,CACLC,MAAOD,EAAAA,EAAME,uBACbC,YAAa,IAEd,IAGF,GAAe7I,EAAAA,EAAAA,MAAK2H,E","sources":["components/SliderDiagram.tsx","components/YearSlider.tsx","components/DiagramBar.tsx","components/DiagramPie.tsx","components/StatsCard.tsx","pages/Stats.tsx"],"sourcesContent":["import { observer } from 'mobx-react-lite';\r\nimport React, { memo, useMemo } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { listStore } from 'utils/listStore';\r\nimport { optionsStore } from 'utils/optionsStore';\r\nimport { getValuesByMonth } from 'utils/transformData';\r\n\r\nconst SliderDiagram: React.FC = observer(() => {\r\n\tconst { list } = listStore;\r\n\tconst { defaultRange } = optionsStore;\r\n\r\n\tconst valuesByMonth: number[] | { [key: string]: number } = useMemo(\r\n\t\t() => getValuesByMonth(list, defaultRange),\r\n\t\t[list, defaultRange]\r\n\t);\r\n\r\n\tconst data = {\r\n\t\tlabels: new Array(valuesByMonth.length).fill(''),\r\n\t\tdatasets: [\r\n\t\t\t{\r\n\t\t\t\tdata: valuesByMonth,\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n\r\n\tconst options = {\r\n\t\tplugins: {\r\n\t\t\tlegend: {\r\n\t\t\t\tdisplay: false,\r\n\t\t\t},\r\n\t\t\ttooltip: {\r\n\t\t\t\tenabled: false,\r\n\t\t\t},\r\n\t\t},\r\n\t\tscales: {\r\n\t\t\tx: {\r\n\t\t\t\tdisplay: false,\r\n\t\t\t\tgrid: {\r\n\t\t\t\t\tdisplay: false,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t\ty: {\r\n\t\t\t\tdisplay: false,\r\n\t\t\t\tgrid: {\r\n\t\t\t\t\tdisplay: false,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t},\r\n\t\telements: {\r\n\t\t\tpoint: {\r\n\t\t\t\tradius: 0,\r\n\t\t\t},\r\n\t\t\tline: {\r\n\t\t\t\tcubicInterpolationMode: 'monotone' as 'monotone',\r\n\t\t\t\tborderColor: '#7775',\r\n\t\t\t},\r\n\t\t},\r\n\t\taspectRatio: 25,\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Line\r\n\t\t\tstyle={{ inlineSize: '100%' }}\r\n\t\t\tdata={data}\r\n\t\t\toptions={options}\r\n\t\t/>\r\n\t);\r\n});\r\n\r\nexport default memo(SliderDiagram);\r\n","import React, { memo, useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Flex, Slider } from 'antd';\r\nimport { listStore } from 'utils/listStore';\r\nimport { ExpenseItem } from 'settings/interfaces';\r\nimport dayjs from 'dayjs';\r\nimport minMax from 'dayjs/plugin/minMax';\r\n\r\nimport {\r\n\tChart,\r\n\tTooltip,\r\n\tCategoryScale,\r\n\tLinearScale,\r\n\tLineElement,\r\n\tLineController,\r\n\tPointElement,\r\n} from 'chart.js';\r\nimport SliderDiagram from './SliderDiagram';\r\nimport { optionsStore } from 'utils/optionsStore';\r\n\r\nChart.register(\r\n\tTooltip,\r\n\tLineElement,\r\n\tLineController,\r\n\tCategoryScale,\r\n\tLinearScale,\r\n\tPointElement\r\n);\r\n\r\ndayjs.extend(minMax);\r\n\r\ninterface Props {\r\n\trange: number[];\r\n\tsetRange: (arg0: number[]) => void;\r\n}\r\n\r\nconst YearSlider: React.FC<Props> = observer(({ range, setRange }) => {\r\n\tconst { list } = listStore;\r\n\tconst { defaultRange, setDefaultRange } = optionsStore;\r\n\r\n\tconst [value, setValue] = useState(defaultRange);\r\n\r\n\tconst sliderRange: [number, number] = useMemo(() => {\r\n\t\tconst dates = Object.values(list).map((item: ExpenseItem) => item.date);\r\n\t\treturn [Math.min(...dates), Math.max(...dates)];\r\n\t}, [list]);\r\n\r\n\tconst marks: { [key: number]: string } = useMemo(() => {\r\n\t\tconst start = dayjs(sliderRange[0]).startOf('day');\r\n\t\tconst end = dayjs(sliderRange[1]).endOf('day');\r\n\t\tconst marks: { [key: number]: string } = {};\r\n\t\tlet currentDate = start;\r\n\r\n\t\twhile (currentDate.isBefore(end) || currentDate.isSame(end, 'month')) {\r\n\t\t\tmarks[currentDate.valueOf()] =\r\n\t\t\t\tcurrentDate.month() === 0 ? currentDate.format('YYYY') : ' ';\r\n\t\t\tcurrentDate = currentDate.add(1, 'month').startOf('month');\r\n\t\t}\r\n\t\treturn marks;\r\n\t}, [sliderRange]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetDefaultRange(sliderRange);\r\n\t}, [sliderRange, setDefaultRange]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetRange(defaultRange);\r\n\t}, [defaultRange, setRange]);\r\n\r\n\tconst handleRangeChanging = useCallback(\r\n\t\t(values: number[]) => {\r\n\t\t\tsetRange(values);\r\n\t\t},\r\n\t\t[setRange]\r\n\t);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetValue(range);\r\n\t}, [range]);\r\n\r\n\treturn dayjs(defaultRange[1]).diff(dayjs(defaultRange[0]), 'hours') >= 48 ? (\r\n\t\t<Flex\r\n\t\t\tvertical\r\n\t\t\talign='stretch'\r\n\t\t\tstyle={{ inlineSize: '100%' }}\r\n\t\t>\r\n\t\t\t<SliderDiagram />\r\n\t\t\t<Slider\r\n\t\t\t\trange\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tmarks={marks}\r\n\t\t\t\tstep={null}\r\n\t\t\t\tdots={true}\r\n\t\t\t\ttooltip={{\r\n\t\t\t\t\tformatter: (value: number | undefined) =>\r\n\t\t\t\t\t\tdayjs(value).format('MM.YY'),\r\n\t\t\t\t}}\r\n\t\t\t\tmin={sliderRange[0]}\r\n\t\t\t\tmax={sliderRange[1]}\r\n\t\t\t\tdefaultValue={defaultRange}\r\n\t\t\t\tonChange={setValue}\r\n\t\t\t\tonChangeComplete={handleRangeChanging}\r\n\t\t\t/>\r\n\t\t</Flex>\r\n\t) : (\r\n\t\t<></>\r\n\t);\r\n});\r\n\r\nexport default memo(YearSlider);\r\n","import React, { useMemo } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { userStore } from 'utils/userStore';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport languages from 'settings/languages';\r\nimport { getSymbolAndPrice } from 'utils/utils';\r\nimport { Flex } from 'antd';\r\nimport dayjs from 'dayjs';\r\nimport {\r\n\tChart,\r\n\tTooltip,\r\n\tBarController,\r\n\tBarElement,\r\n\tCategoryScale,\r\n\tLinearScale,\r\n} from 'chart.js';\r\nimport { getValuesForBarDiagram } from 'utils/transformData';\r\nimport { optionsStore } from 'utils/optionsStore';\r\nimport { listStore } from 'utils/listStore';\r\nimport { Interval } from 'settings/interfaces';\r\nChart.register(Tooltip, BarController, BarElement, CategoryScale, LinearScale);\r\n\r\ninterface Props {\r\n\tmode: Interval;\r\n\tsetMode: (arg0: Interval) => void;\r\n}\r\n\r\nconst DiagramBar: React.FC<Props> = observer(({ mode, setMode }) => {\r\n\tconst { isSmallScreen } = userStore;\r\n\tconst { list } = listStore;\r\n\tconst { statsOptions, userOptions, setStatsRange } = optionsStore;\r\n\tconst { currency, language } = userOptions;\r\n\r\n\tconst { range } = statsOptions;\r\n\r\n\tconst values: number[] | { [key: string]: number } = useMemo(() => {\r\n\t\treturn getValuesForBarDiagram(list, currency, mode, dayjs(range[0]).year());\r\n\t}, [currency, mode, range, list]);\r\n\r\n\tconst colors = useMemo(\r\n\t\t() =>\r\n\t\t\tmode === 'year'\r\n\t\t\t\t? Object.keys(values).map((key: string) => {\r\n\t\t\t\t\t\tconst date = dayjs(key);\r\n\t\t\t\t\t\treturn date >= dayjs(range[0]).startOf('year') &&\r\n\t\t\t\t\t\t\tdate <= dayjs(range[1]).endOf('year')\r\n\t\t\t\t\t\t\t? '#f00'\r\n\t\t\t\t\t\t\t: '#f007';\r\n\t\t\t\t  })\r\n\t\t\t\t: Object.keys(values).map((key: string) => {\r\n\t\t\t\t\t\tconst month = Number(key);\r\n\t\t\t\t\t\treturn month >= dayjs(range[0]).startOf('month').month() &&\r\n\t\t\t\t\t\t\tmonth <= dayjs(range[1]).endOf('month').month()\r\n\t\t\t\t\t\t\t? '#f00'\r\n\t\t\t\t\t\t\t: '#f005';\r\n\t\t\t\t  }),\r\n\r\n\t\t[range, values, mode]\r\n\t);\r\n\r\n\tconst data = {\r\n\t\tlabels: mode === 'month' ? languages.months[language] : Object.keys(values),\r\n\t\tdatasets: [\r\n\t\t\t{\r\n\t\t\t\tlabel: getSymbolAndPrice(currency),\r\n\t\t\t\tdata: Object.values(values),\r\n\t\t\t\tbackgroundColor: colors,\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n\r\n\tconst options = {\r\n\t\tplugins: {\r\n\t\t\tlegend: {\r\n\t\t\t\tdisplay: false,\r\n\t\t\t},\r\n\t\t},\r\n\t\tonClick: (_: any, chartElements: any) => {\r\n\t\t\tif (chartElements.length) {\r\n\t\t\t\tconst index = chartElements[0].index;\r\n\r\n\t\t\t\tconst newRangeItem =\r\n\t\t\t\t\tmode === 'year'\r\n\t\t\t\t\t\t? [\r\n\t\t\t\t\t\t\t\tdayjs(range[0])\r\n\t\t\t\t\t\t\t\t\t.year(Number(data.labels[index]))\r\n\t\t\t\t\t\t\t\t\t.startOf('year')\r\n\t\t\t\t\t\t\t\t\t.valueOf(),\r\n\t\t\t\t\t\t\t\tdayjs(range[0])\r\n\t\t\t\t\t\t\t\t\t.year(Number(data.labels[index]))\r\n\t\t\t\t\t\t\t\t\t.endOf('year')\r\n\t\t\t\t\t\t\t\t\t.valueOf(),\r\n\t\t\t\t\t\t  ]\r\n\t\t\t\t\t\t: [\r\n\t\t\t\t\t\t\t\tdayjs(range[0]).month(index).startOf('month').valueOf(),\r\n\t\t\t\t\t\t\t\tdayjs(range[0]).month(index).endOf('month').valueOf(),\r\n\t\t\t\t\t\t  ];\r\n\r\n\t\t\t\tmode === 'year' && setMode('month');\r\n\t\t\t\tsetStatsRange(newRangeItem);\r\n\t\t\t}\r\n\t\t},\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Flex style={{ inlineSize: isSmallScreen ? 'unset' : '50%' }}>\r\n\t\t\t<Bar\r\n\t\t\t\tdata={data}\r\n\t\t\t\toptions={options}\r\n\t\t\t/>\r\n\t\t</Flex>\r\n\t);\r\n});\r\n\r\nexport default DiagramBar;\r\n","import React, { useMemo } from 'react';\r\nimport { Value } from '../settings/interfaces';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { userStore } from 'utils/userStore';\r\nimport { Flex } from 'antd';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { getSymbolAndPrice } from 'utils/utils';\r\nimport {\r\n\tChart,\r\n\tArcElement,\r\n\tPieController,\r\n\tTooltip,\r\n\tLegend,\r\n\tTitle,\r\n} from 'chart.js';\r\nimport { getValuesForPieDiagram } from 'utils/transformData';\r\nimport { optionsStore } from 'utils/optionsStore';\r\nimport { listStore } from 'utils/listStore';\r\nimport { categoryStore } from 'utils/categoryStore';\r\nChart.register(ArcElement, PieController, Tooltip, Legend, Title);\r\n\r\nconst DiagramPie: React.FC = observer(() => {\r\n\tconst { isSmallScreen } = userStore;\r\n\tconst { list } = listStore;\r\n\tconst { userOptions, statsOptions } = optionsStore;\r\n\tconst { currency } = userOptions;\r\n\tconst { categories } = categoryStore;\r\n\r\n\tconst { range } = statsOptions;\r\n\r\n\tconst valuesByCategory: Value[] = useMemo(\r\n\t\t() => getValuesForPieDiagram(list, range, currency),\r\n\t\t[list, currency, range]\r\n\t);\r\n\r\n\tconst [names, colors, values] = useMemo(() => {\r\n\t\treturn [\r\n\t\t\tvaluesByCategory.map((value: Value) => categories[value.categoryId].name),\r\n\t\t\tvaluesByCategory.map(\r\n\t\t\t\t(value: Value) => categories[value.categoryId].color\r\n\t\t\t),\r\n\t\t\tvaluesByCategory.map((value: Value) => Math.round(value.value)),\r\n\t\t];\r\n\t}, [categories, valuesByCategory]);\r\n\r\n\tconst data = {\r\n\t\tlabels: names,\r\n\t\tdatasets: [\r\n\t\t\t{\r\n\t\t\t\tlabel: getSymbolAndPrice(currency),\r\n\t\t\t\tdata: values,\r\n\t\t\t\tbackgroundColor: colors,\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n\r\n\tconst options = {\r\n\t\tplugins: {\r\n\t\t\tlegend: {\r\n\t\t\t\tdisplay: true,\r\n\t\t\t\tposition: 'right' as const,\r\n\t\t\t},\r\n\t\t},\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Flex\r\n\t\t\tstyle={{\r\n\t\t\t\tinlineSize: isSmallScreen ? 'unset' : '40%',\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<Pie\r\n\t\t\t\tdata={data}\r\n\t\t\t\toptions={options}\r\n\t\t\t/>\r\n\t\t</Flex>\r\n\t);\r\n});\r\n\r\nexport default DiagramPie;\r\n","import { Card, Statistic, Tooltip, Typography } from 'antd';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { memo, useMemo } from 'react';\r\nimport { listStore } from 'utils/listStore';\r\nimport { optionsStore } from 'utils/optionsStore';\r\nimport { getTotalInCurrentRange } from 'utils/transformData';\r\nimport { userStore } from 'utils/userStore';\r\nimport { getSymbolAndPrice } from 'utils/utils';\r\nimport dayjs from 'dayjs';\r\nimport { ReloadOutlined } from '@ant-design/icons';\r\n\r\ninterface Props {\r\n\tresetRange: () => void;\r\n}\r\n\r\nconst StatsCard: React.FC<Props> = observer(({ resetRange }) => {\r\n\tconst { isSmallScreen } = userStore;\r\n\tconst { list } = listStore;\r\n\tconst { statsOptions, userOptions, defaultRange } = optionsStore;\r\n\r\n\tconst { range } = statsOptions;\r\n\tconst { currency } = userOptions;\r\n\r\n\tconst value = useMemo(\r\n\t\t() => getTotalInCurrentRange(list, range, currency),\r\n\t\t[list, range, currency]\r\n\t);\r\n\r\n\tconst cardTitle = useMemo(() => {\r\n\t\tconst format = true ? 'DD.MM.YY' : 'MM.YY';\r\n\t\treturn (\r\n\t\t\t<Typography.Text\r\n\t\t\t\ttype='secondary'\r\n\t\t\t\tstyle={{ fontSize: isSmallScreen ? '.8em' : '1.2em' }}\r\n\t\t\t>\r\n\t\t\t\t{dayjs(range[0]).format(format)}\r\n\t\t\t\t{range[0] !== range[1] ? `-${dayjs(range[1]).format(format)}` : ''}\r\n\t\t\t</Typography.Text>\r\n\t\t);\r\n\t}, [range, isSmallScreen]);\r\n\r\n\tconst isRangeChanged = useMemo(\r\n\t\t() => range[0] !== defaultRange[0] || range[1] !== defaultRange[1],\r\n\t\t[range, defaultRange]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<Card bordered>\r\n\t\t\t<Statistic\r\n\t\t\t\ttitle={\r\n\t\t\t\t\t<Tooltip\r\n\t\t\t\t\t\tplacement='right'\r\n\t\t\t\t\t\tcolor='#0000'\r\n\t\t\t\t\t\topen={isRangeChanged}\r\n\t\t\t\t\t\ttitle={\r\n\t\t\t\t\t\t\t<ReloadOutlined\r\n\t\t\t\t\t\t\t\tonClick={resetRange}\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tscale: isSmallScreen ? '1' : '1.25',\r\n\t\t\t\t\t\t\t\t\tfilter: 'invert()',\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{cardTitle}\r\n\t\t\t\t\t</Tooltip>\r\n\t\t\t\t}\r\n\t\t\t\tvalue={value}\r\n\t\t\t\tprefix={getSymbolAndPrice(currency)}\r\n\t\t\t\tvalueStyle={{\r\n\t\t\t\t\tcolor: '#f00',\r\n\t\t\t\t\tfontSize: isSmallScreen ? '1.5em' : '2.25em',\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</Card>\r\n\t);\r\n});\r\n\r\nexport default memo(StatsCard);\r\n","import React, { useState, useCallback, memo, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { listStore } from 'utils/listStore';\r\nimport { Empty, Flex } from 'antd';\r\nimport DiagramBar from '../components/DiagramBar';\r\nimport DiagramPie from 'components/DiagramPie';\r\nimport { userStore } from 'utils/userStore';\r\nimport { optionsStore } from 'utils/optionsStore';\r\nimport dayjs from 'dayjs';\r\nimport isBetween from 'dayjs/plugin/isBetween';\r\nimport YearSlider from 'components/YearSlider';\r\nimport { Interval } from 'settings/interfaces';\r\nimport LargeSpin from 'components/LargeSpin';\r\nimport StatsCard from 'components/StatsCard';\r\n\r\ndayjs.extend(isBetween);\r\n\r\nconst Stats: React.FC = observer(() => {\r\n\tconst { list } = listStore;\r\n\tconst { isSmallScreen, loading, tourRefs } = userStore;\r\n\tconst { statsOptions, defaultRange, setStatsRange } = optionsStore;\r\n\r\n\tconst { range } = statsOptions;\r\n\r\n\tconst [mode, setMode] = useState<Interval>('year');\r\n\r\n\tconst resetRange = useCallback(() => {\r\n\t\tsetMode('year');\r\n\t\tsetStatsRange(defaultRange);\r\n\t}, [setMode, defaultRange, setStatsRange]);\r\n\r\n\tuseEffect(() => {\r\n\t\tconst resetRangeWithEsc = (event: KeyboardEvent) => {\r\n\t\t\tif (event.key === 'Escape') {\r\n\t\t\t\tresetRange();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\twindow.addEventListener('keydown', resetRangeWithEsc);\r\n\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener('keydown', resetRangeWithEsc);\r\n\t\t};\r\n\t}, [resetRange]);\r\n\r\n\tuseEffect(() => {\r\n\t\tif (dayjs(range[0]).year() !== dayjs(range[1]).year()) {\r\n\t\t\tsetMode('year');\r\n\t\t} else {\r\n\t\t\tsetMode('month');\r\n\t\t}\r\n\t}, [range]);\r\n\r\n\tconst DiagramsJSX = (\r\n\t\t<Flex\r\n\t\t\tvertical\r\n\t\t\tgap={16}\r\n\t\t\talign='stretch'\r\n\t\t\tstyle={{ inlineSize: '100%' }}\r\n\t\t>\r\n\t\t\t<Flex\r\n\t\t\t\tref={tourRefs[8]}\r\n\t\t\t\tstyle={{ inlineSize: '100%' }}\r\n\t\t\t>\r\n\t\t\t\t<YearSlider\r\n\t\t\t\t\trange={range}\r\n\t\t\t\t\tsetRange={setStatsRange}\r\n\t\t\t\t/>\r\n\t\t\t</Flex>\r\n\t\t\t<Flex\r\n\t\t\t\tref={tourRefs[7]}\r\n\t\t\t\talign='center'\r\n\t\t\t\tjustify='space-between'\r\n\t\t\t\tvertical={isSmallScreen}\r\n\t\t\t>\r\n\t\t\t\t<DiagramBar\r\n\t\t\t\t\tmode={mode}\r\n\t\t\t\t\tsetMode={setMode}\r\n\t\t\t\t/>\r\n\t\t\t\t<DiagramPie />\r\n\t\t\t</Flex>\r\n\t\t</Flex>\r\n\t);\r\n\r\n\treturn loading ? (\r\n\t\t<LargeSpin />\r\n\t) : Object.keys(list).length ? (\r\n\t\t<Flex\r\n\t\t\tvertical\r\n\t\t\tgap={32}\r\n\t\t\talign='start'\r\n\t\t>\r\n\t\t\t<StatsCard resetRange={resetRange} />\r\n\t\t\t{DiagramsJSX}\r\n\t\t</Flex>\r\n\t) : (\r\n\t\t<Empty\r\n\t\t\timage={Empty.PRESENTED_IMAGE_SIMPLE}\r\n\t\t\tdescription={''}\r\n\t\t/>\r\n\t);\r\n});\r\n\r\nexport default memo(Stats);\r\n"],"names":["SliderDiagram","observer","list","listStore","defaultRange","optionsStore","valuesByMonth","useMemo","getValuesByMonth","data","labels","Array","length","fill","datasets","_jsx","Line","style","inlineSize","options","plugins","legend","display","tooltip","enabled","scales","x","grid","y","elements","point","radius","line","cubicInterpolationMode","borderColor","aspectRatio","memo","Chart","register","Tooltip","LineElement","LineController","CategoryScale","LinearScale","PointElement","dayjs","minMax","YearSlider","_ref","range","setRange","setDefaultRange","value","setValue","useState","sliderRange","dates","Object","values","map","item","date","Math","min","max","marks","start","startOf","end","endOf","currentDate","isBefore","isSame","valueOf","month","format","add","useEffect","handleRangeChanging","useCallback","diff","_jsxs","Flex","vertical","align","children","Slider","step","dots","formatter","defaultValue","onChange","onChangeComplete","_Fragment","BarController","BarElement","mode","setMode","isSmallScreen","userStore","statsOptions","userOptions","setStatsRange","currency","language","getValuesForBarDiagram","year","colors","keys","key","Number","languages","months","label","getSymbolAndPrice","backgroundColor","onClick","_","chartElements","index","newRangeItem","Bar","ArcElement","PieController","Legend","Title","categories","categoryStore","valuesByCategory","getValuesForPieDiagram","names","categoryId","name","color","round","Pie","position","StatsCard","resetRange","getTotalInCurrentRange","cardTitle","Typography","Text","type","fontSize","concat","isRangeChanged","Card","bordered","Statistic","title","placement","open","ReloadOutlined","scale","filter","prefix","valueStyle","isBetween","Stats","loading","tourRefs","resetRangeWithEsc","event","window","addEventListener","removeEventListener","DiagramsJSX","gap","ref","justify","DiagramBar","DiagramPie","LargeSpin","Empty","image","PRESENTED_IMAGE_SIMPLE","description"],"sourceRoot":""}